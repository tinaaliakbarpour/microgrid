// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: microgrid/iot/grid.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Grid struct {
	Id        uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name      string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	CenterLat int32    `protobuf:"varint,3,opt,name=centerLat,proto3" json:"centerLat,omitempty"`
	CenterLon int32    `protobuf:"varint,4,opt,name=centerLon,proto3" json:"centerLon,omitempty"`
	Side      uint64   `protobuf:"varint,5,opt,name=side,proto3" json:"side,omitempty"`
	Admins    []string `protobuf:"bytes,6,rep,name=admins,proto3" json:"admins,omitempty"`
}

func (m *Grid) Reset()         { *m = Grid{} }
func (m *Grid) String() string { return proto.CompactTextString(m) }
func (*Grid) ProtoMessage()    {}
func (*Grid) Descriptor() ([]byte, []int) {
	return fileDescriptor_eec02971fac9c155, []int{0}
}
func (m *Grid) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Grid) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Grid.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Grid) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Grid.Merge(m, src)
}
func (m *Grid) XXX_Size() int {
	return m.Size()
}
func (m *Grid) XXX_DiscardUnknown() {
	xxx_messageInfo_Grid.DiscardUnknown(m)
}

var xxx_messageInfo_Grid proto.InternalMessageInfo

func (m *Grid) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Grid) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Grid) GetCenterLat() int32 {
	if m != nil {
		return m.CenterLat
	}
	return 0
}

func (m *Grid) GetCenterLon() int32 {
	if m != nil {
		return m.CenterLon
	}
	return 0
}

func (m *Grid) GetSide() uint64 {
	if m != nil {
		return m.Side
	}
	return 0
}

func (m *Grid) GetAdmins() []string {
	if m != nil {
		return m.Admins
	}
	return nil
}

func init() {
	proto.RegisterType((*Grid)(nil), "microgrid.iot.Grid")
}

func init() { proto.RegisterFile("microgrid/iot/grid.proto", fileDescriptor_eec02971fac9c155) }

var fileDescriptor_eec02971fac9c155 = []byte{
	// 230 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x8f, 0xb1, 0x4a, 0xc4, 0x40,
	0x10, 0x40, 0x33, 0xb9, 0x5c, 0x20, 0x0b, 0x5a, 0x6c, 0x21, 0x5b, 0xc8, 0x12, 0xac, 0x52, 0x25,
	0x88, 0x7f, 0x60, 0x63, 0xa1, 0x55, 0x4a, 0xbb, 0x4d, 0x76, 0x39, 0x07, 0xcd, 0x4e, 0xd8, 0xcc,
	0x81, 0xfe, 0x85, 0xf8, 0x55, 0x96, 0x57, 0x5a, 0x4a, 0xf2, 0x23, 0x72, 0x8b, 0x18, 0xaf, 0x7b,
	0x33, 0x0f, 0x66, 0x78, 0x42, 0x0d, 0xd8, 0x07, 0xda, 0x05, 0xb4, 0x0d, 0x12, 0x37, 0x47, 0xa8,
	0xc7, 0x40, 0x4c, 0xf2, 0xec, 0xcf, 0xd4, 0x48, 0x7c, 0xf5, 0x01, 0x22, 0xbb, 0x0b, 0x68, 0xe5,
	0xb9, 0x48, 0xd1, 0x2a, 0x28, 0xa1, 0xca, 0xda, 0x14, 0xad, 0x94, 0x22, 0xf3, 0x66, 0x70, 0x2a,
	0x2d, 0xa1, 0x2a, 0xda, 0xc8, 0xf2, 0x52, 0x14, 0xbd, 0xf3, 0xec, 0xc2, 0x83, 0x61, 0xb5, 0x29,
	0xa1, 0xda, 0xb6, 0xeb, 0xe2, 0x9f, 0x25, 0xaf, 0xb2, 0x13, 0x4b, 0xfe, 0x78, 0x6f, 0x42, 0xeb,
	0xd4, 0x36, 0x7e, 0x88, 0x2c, 0x2f, 0x44, 0x6e, 0xec, 0x80, 0x7e, 0x52, 0x79, 0xb9, 0xa9, 0x8a,
	0xf6, 0x77, 0xba, 0xbd, 0xff, 0x9c, 0x35, 0x1c, 0x66, 0x0d, 0xdf, 0xb3, 0x86, 0xf7, 0x45, 0x27,
	0x87, 0x45, 0x27, 0x5f, 0x8b, 0x4e, 0x1e, 0xaf, 0x77, 0xc8, 0x4f, 0xfb, 0xae, 0xee, 0x69, 0x68,
	0x18, 0xbd, 0x31, 0x2f, 0x68, 0x9e, 0x3b, 0x13, 0x46, 0xda, 0x87, 0x66, 0x6d, 0x7e, 0x8d, 0xd5,
	0xfc, 0x36, 0xba, 0xa9, 0xcb, 0x63, 0xf7, 0xcd, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xbd, 0xb2,
	0x73, 0x07, 0x13, 0x01, 0x00, 0x00,
}

func (m *Grid) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Grid) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Grid) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Admins) > 0 {
		for iNdEx := len(m.Admins) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Admins[iNdEx])
			copy(dAtA[i:], m.Admins[iNdEx])
			i = encodeVarintGrid(dAtA, i, uint64(len(m.Admins[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if m.Side != 0 {
		i = encodeVarintGrid(dAtA, i, uint64(m.Side))
		i--
		dAtA[i] = 0x28
	}
	if m.CenterLon != 0 {
		i = encodeVarintGrid(dAtA, i, uint64(m.CenterLon))
		i--
		dAtA[i] = 0x20
	}
	if m.CenterLat != 0 {
		i = encodeVarintGrid(dAtA, i, uint64(m.CenterLat))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintGrid(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintGrid(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintGrid(dAtA []byte, offset int, v uint64) int {
	offset -= sovGrid(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Grid) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGrid(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGrid(uint64(l))
	}
	if m.CenterLat != 0 {
		n += 1 + sovGrid(uint64(m.CenterLat))
	}
	if m.CenterLon != 0 {
		n += 1 + sovGrid(uint64(m.CenterLon))
	}
	if m.Side != 0 {
		n += 1 + sovGrid(uint64(m.Side))
	}
	if len(m.Admins) > 0 {
		for _, s := range m.Admins {
			l = len(s)
			n += 1 + l + sovGrid(uint64(l))
		}
	}
	return n
}

func sovGrid(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGrid(x uint64) (n int) {
	return sovGrid(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Grid) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGrid
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Grid: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Grid: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGrid
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGrid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CenterLat", wireType)
			}
			m.CenterLat = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CenterLat |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CenterLon", wireType)
			}
			m.CenterLon = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CenterLon |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Side", wireType)
			}
			m.Side = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Side |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admins", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGrid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGrid
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGrid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admins = append(m.Admins, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGrid(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGrid
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGrid(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGrid
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGrid
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGrid
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGrid
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGrid
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGrid
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGrid        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGrid          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGrid = fmt.Errorf("proto: unexpected end of group")
)
