syntax = "proto3";

package microgrid.iot;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "microgrid/iot/params.proto";
import "microgrid/iot/grid.proto";
import "microgrid/iot/device.proto";

option go_package = "github.com/tinaaliakbarpour/microgrid/x/iot/types";

// Query defines the gRPC querier service.
service Query {
  
  // Parameters queries the parameters of the module.
  rpc Params (QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/tinaaliakbarpour/microgrid/iot/params";
  
  }
  
  // Queries a list of Grid items.
  rpc Grid    (QueryGetGridRequest) returns (QueryGetGridResponse) {
    option (google.api.http).get = "/tinaaliakbarpour/microgrid/iot/grid/{id}";
  
  }
  rpc GridAll (QueryAllGridRequest) returns (QueryAllGridResponse) {
    option (google.api.http).get = "/tinaaliakbarpour/microgrid/iot/grid";
  
  }
  
  // // Queries a list of Device items.
  rpc Device    (QueryGetDeviceRequest) returns (QueryGetDeviceResponse) {
    option (google.api.http).get = "/tinaaliakbarpour/microgrid/iot/device/{gridId}/{address}";
  
  }
  rpc DeviceAll (QueryAllDeviceRequest) returns (QueryAllDeviceResponse) {
    option (google.api.http).get = "/tinaaliakbarpour/microgrid/iot/device";
  
  }
  
  // Queries a list of ListDeviceByGridId items.
  rpc ListDeviceByGridId (QueryListDeviceByGridIdRequest) returns (QueryListDeviceByGridIdResponse) {
    option (google.api.http).get = "/tinaaliakbarpour/microgrid/iot/list_device_by_grid_id/{gridId}";
  
  }
}
// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryGetGridRequest {
  uint64 id = 1;
}

message QueryGetGridResponse {
  Grid Grid = 1 [(gogoproto.nullable) = false];
}

message QueryAllGridRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllGridResponse {
  repeated Grid                                   Grid       = 1 [(gogoproto.nullable) = false];
           cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetDeviceRequest {
  uint64 gridId  = 1;
  string address = 2;
}

message QueryGetDeviceResponse {
  Device device = 1 [(gogoproto.nullable) = false];
}

message QueryAllDeviceRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllDeviceResponse {
  repeated Device                                 device     = 1 [(gogoproto.nullable) = false];
           cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryListDeviceByGridIdRequest {
  uint64 gridId = 1;
}

message QueryListDeviceByGridIdResponse {
  repeated Device device = 1;
}

